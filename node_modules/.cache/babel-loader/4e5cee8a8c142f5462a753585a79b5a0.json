{"ast":null,"code":"import _toConsumableArray from\"/Users/paulndam/Documents/Node-Js/Sample-Mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/paulndam/Documents/Node-Js/Sample-Mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/paulndam/Documents/Node-Js/Sample-Mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useState,useEffect}from\"react\";import PostList from\"./PostList\";import{makeStyles}from\"@material-ui/core/styles\";import Card from\"@material-ui/core/Card\";import Typography from\"@material-ui/core/Typography\";import Divider from\"@material-ui/core/Divider\";import auth from\"../../utils/Auth/authHelper\";import{listNewsFeed}from\"../../api/PostApi/postApi\";import NewPost from\"./NewPost\";import LoadingSpinner from\"../../pages/Spinner/LoadingSpinner\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=makeStyles(function(theme){return{card:{margin:\"auto\",paddingTop:0,paddingBottom:theme.spacing(3)},title:{padding:\"\".concat(theme.spacing(3),\"px \").concat(theme.spacing(2.5),\"px \").concat(theme.spacing(2),\"px\"),color:theme.palette.openTitle,fontSize:\"1em\"},media:{minHeight:330},root3:_objectSpread(_objectSpread({},theme.typography.button),{},{//backgroundColor: theme.palette.background.paper,\npadding:theme.spacing(1),color:\"#fff\"})};});var NewsFeed=function NewsFeed(){var classes=useStyles();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),posts=_useState2[0],setPosts=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var jwt=auth.isAuthenticated();//upon when the components mount, we will use the useEffect hook that will initially load the state of the post that rendered in the PostList componet , we also achieve this by calling the fetch api method we implemented .listNewsFeed\n// setLoading(true);\nuseEffect(function(){var abortController=new AbortController();var signal=abortController.signal;setLoading(true);listNewsFeed({userId:jwt.user._id},{t:jwt.token},signal).then(function(data){console.log(\"--- data from loading posts from useEffect in News Feed component\",data);if(data.error){console.log(data.error);}else{setLoading(false);setPosts(data);}});return function cleanup(){abortController.abort();};},[]);// take the new post created in the NewPost component and add it to the posts in the state.\nvar addPost=function addPost(post){var updatedPosts=_toConsumableArray(posts);updatedPosts.unshift(post);setPosts(updatedPosts);};//take the deleted post from the Post component in PostList, and remove it from the posts in the state.\nvar removePost=function removePost(post){var updatedPosts=_toConsumableArray(posts);var index=updatedPosts.indexOf(post);updatedPosts.splice(index,1);setPosts(updatedPosts);};return/*#__PURE__*/_jsxs(Card,{className:classes.card,style:{backgroundColor:\"#000000\"},children:[/*#__PURE__*/_jsx(\"div\",{className:classes.root3,children:\"NewsFeed\"}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsx(NewPost,{addUpdate:addPost}),/*#__PURE__*/_jsx(Divider,{}),loading?/*#__PURE__*/_jsx(LoadingSpinner,{}):/*#__PURE__*/_jsx(PostList,{removeUpdate:removePost,posts:posts})]});};export default NewsFeed;","map":{"version":3,"sources":["/Users/paulndam/Documents/Node-Js/Sample-Mern/client/src/components/Post/NewsFeed.jsx"],"names":["React","useState","useEffect","PostList","makeStyles","Card","Typography","Divider","auth","listNewsFeed","NewPost","LoadingSpinner","useStyles","theme","card","margin","paddingTop","paddingBottom","spacing","title","padding","color","palette","openTitle","fontSize","media","minHeight","root3","typography","button","NewsFeed","classes","posts","setPosts","loading","setLoading","jwt","isAuthenticated","abortController","AbortController","signal","userId","user","_id","t","token","then","data","console","log","error","cleanup","abort","addPost","post","updatedPosts","unshift","removePost","index","indexOf","splice","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PostList from \"./PostList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport auth from \"../../utils/Auth/authHelper\";\nimport { listNewsFeed } from \"../../api/PostApi/postApi\";\nimport NewPost from \"./NewPost\";\nimport LoadingSpinner from \"../../pages/Spinner/LoadingSpinner\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: \"auto\",\n    paddingTop: 0,\n    paddingBottom: theme.spacing(3),\n  },\n  title: {\n    padding: `${theme.spacing(3)}px ${theme.spacing(2.5)}px ${theme.spacing(\n      2\n    )}px`,\n    color: theme.palette.openTitle,\n    fontSize: \"1em\",\n  },\n  media: {\n    minHeight: 330,\n  },\n  root3: {\n    ...theme.typography.button,\n    //backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    color: \"#fff\",\n  },\n}));\n\nconst NewsFeed = () => {\n  const classes = useStyles();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const jwt = auth.isAuthenticated();\n\n  //upon when the components mount, we will use the useEffect hook that will initially load the state of the post that rendered in the PostList componet , we also achieve this by calling the fetch api method we implemented .listNewsFeed\n  // setLoading(true);\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    setLoading(true);\n    listNewsFeed({ userId: jwt.user._id }, { t: jwt.token }, signal).then(\n      (data) => {\n        console.log(\n          \"--- data from loading posts from useEffect in News Feed component\",\n          data\n        );\n        if (data.error) {\n          console.log(data.error);\n        } else {\n          setLoading(false);\n          setPosts(data);\n        }\n      }\n    );\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  // take the new post created in the NewPost component and add it to the posts in the state.\n\n  const addPost = (post) => {\n    const updatedPosts = [...posts];\n    updatedPosts.unshift(post);\n    setPosts(updatedPosts);\n  };\n  //take the deleted post from the Post component in PostList, and remove it from the posts in the state.\n  const removePost = (post) => {\n    const updatedPosts = [...posts];\n    const index = updatedPosts.indexOf(post);\n    updatedPosts.splice(index, 1);\n    setPosts(updatedPosts);\n  };\n\n  return (\n    <Card className={classes.card} style={{ backgroundColor: \"#000000\" }}>\n      <div className={classes.root3}>NewsFeed</div>\n      <Divider />\n      <NewPost addUpdate={addPost} />\n      <Divider />\n      {loading ? (\n        <LoadingSpinner />\n      ) : (\n        <PostList removeUpdate={removePost} posts={posts} />\n      )}\n    </Card>\n  );\n};\n\nexport default NewsFeed;\n"]},"metadata":{},"sourceType":"module"}