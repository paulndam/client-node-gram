{"ast":null,"code":"var _jsxFileName = \"/Users/paulndam/Documents/Node-Js/Sample-Mern/client/src/components/Post/NewsFeed.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PostList from \"./PostList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport auth from \"../../utils/Auth/authHelper\";\nimport { listNewsFeed } from \"../../api/PostApi/postApi\";\nimport NewPost from \"./NewPost\";\nimport LoadingSpinner from \"../../pages/Spinner/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  card: {\n    margin: \"auto\",\n    paddingTop: 0,\n    paddingBottom: theme.spacing(3)\n  },\n  title: {\n    padding: `${theme.spacing(3)}px ${theme.spacing(2.5)}px ${theme.spacing(2)}px`,\n    color: theme.palette.openTitle,\n    fontSize: \"1em\"\n  },\n  media: {\n    minHeight: 330\n  },\n  root3: { ...theme.typography.button,\n    //backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    color: \"#fff\"\n  }\n}));\n\nconst NewsFeed = () => {\n  _s();\n\n  const classes = useStyles();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const jwt = auth.isAuthenticated(); //upon when the components mount, we will use the useEffect hook that will initially load the state of the post that rendered in the PostList componet , we also achieve this by calling the fetch api method we implemented .listNewsFeed\n  // setLoading(true);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    setLoading(true);\n    listNewsFeed({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, signal).then(data => {\n      console.log(\"--- data from loading posts from useEffect in News Feed component\", data);\n\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        setLoading(false);\n        setPosts(data);\n      }\n    });\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []); // take the new post created in the NewPost component and add it to the posts in the state.\n\n  const addPost = post => {\n    const updatedPosts = [...posts];\n    updatedPosts.unshift(post);\n    setPosts(updatedPosts);\n  }; //take the deleted post from the Post component in PostList, and remove it from the posts in the state.\n\n\n  const removePost = post => {\n    const updatedPosts = [...posts];\n    const index = updatedPosts.indexOf(post);\n    updatedPosts.splice(index, 1);\n    setPosts(updatedPosts);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    style: {\n      backgroundColor: \"#000000\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root3,\n      children: \"NewsFeed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewPost, {\n      addUpdate: addPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PostList, {\n      removeUpdate: removePost,\n      posts: posts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewsFeed, \"+QBNCZCHYcfgHMf2pxn09mZJ5yE=\", false, function () {\n  return [useStyles];\n});\n\n_c = NewsFeed;\nexport default NewsFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewsFeed\");","map":{"version":3,"sources":["/Users/paulndam/Documents/Node-Js/Sample-Mern/client/src/components/Post/NewsFeed.jsx"],"names":["React","useState","useEffect","PostList","makeStyles","Card","Typography","Divider","auth","listNewsFeed","NewPost","LoadingSpinner","useStyles","theme","card","margin","paddingTop","paddingBottom","spacing","title","padding","color","palette","openTitle","fontSize","media","minHeight","root3","typography","button","NewsFeed","classes","posts","setPosts","loading","setLoading","jwt","isAuthenticated","abortController","AbortController","signal","userId","user","_id","t","token","then","data","console","log","error","cleanup","abort","addPost","post","updatedPosts","unshift","removePost","index","indexOf","splice","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PostList from \"./PostList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport auth from \"../../utils/Auth/authHelper\";\nimport { listNewsFeed } from \"../../api/PostApi/postApi\";\nimport NewPost from \"./NewPost\";\nimport LoadingSpinner from \"../../pages/Spinner/LoadingSpinner\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: \"auto\",\n    paddingTop: 0,\n    paddingBottom: theme.spacing(3),\n  },\n  title: {\n    padding: `${theme.spacing(3)}px ${theme.spacing(2.5)}px ${theme.spacing(\n      2\n    )}px`,\n    color: theme.palette.openTitle,\n    fontSize: \"1em\",\n  },\n  media: {\n    minHeight: 330,\n  },\n  root3: {\n    ...theme.typography.button,\n    //backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    color: \"#fff\",\n  },\n}));\n\nconst NewsFeed = () => {\n  const classes = useStyles();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const jwt = auth.isAuthenticated();\n\n  //upon when the components mount, we will use the useEffect hook that will initially load the state of the post that rendered in the PostList componet , we also achieve this by calling the fetch api method we implemented .listNewsFeed\n  // setLoading(true);\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    setLoading(true);\n    listNewsFeed({ userId: jwt.user._id }, { t: jwt.token }, signal).then(\n      (data) => {\n        console.log(\n          \"--- data from loading posts from useEffect in News Feed component\",\n          data\n        );\n        if (data.error) {\n          console.log(data.error);\n        } else {\n          setLoading(false);\n          setPosts(data);\n        }\n      }\n    );\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  // take the new post created in the NewPost component and add it to the posts in the state.\n\n  const addPost = (post) => {\n    const updatedPosts = [...posts];\n    updatedPosts.unshift(post);\n    setPosts(updatedPosts);\n  };\n  //take the deleted post from the Post component in PostList, and remove it from the posts in the state.\n  const removePost = (post) => {\n    const updatedPosts = [...posts];\n    const index = updatedPosts.indexOf(post);\n    updatedPosts.splice(index, 1);\n    setPosts(updatedPosts);\n  };\n\n  return (\n    <Card className={classes.card} style={{ backgroundColor: \"#000000\" }}>\n      <div className={classes.root3}>NewsFeed</div>\n      <Divider />\n      <NewPost addUpdate={addPost} />\n      <Divider />\n      {loading ? (\n        <LoadingSpinner />\n      ) : (\n        <PostList removeUpdate={removePost} posts={posts} />\n      )}\n    </Card>\n  );\n};\n\nexport default NewsFeed;\n"]},"metadata":{},"sourceType":"module"}